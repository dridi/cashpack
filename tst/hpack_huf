#!/bin/sh
#
# License: BSD-2-Clause
# (c) 2016-2017 Dridi Boukelmoune <dridi.boukelmoune@gmail.com>

. "$(dirname "$0")"/common.sh

mk_msg </dev/null
mk_tbl </dev/null

_ -----------------
_ Invalid character
_ -----------------

mk_bin <<EOF
00000000 | Literal field without indexing
10000010 | Huffman string of 2 octets
11111111 | The null character (13 bits)
11000111 | Followed by '111' EOS
EOF

tst_decode --expect-error CHR

_ ----------------------------------------------------
_ Parse a Huffman string longer than the decode buffer
_ ----------------------------------------------------

# Because the most common character is conveniently '0' it can be used to
# represent both itself and its Huffman hexdump. Because the Huffman code
# is a 5-bit string of zeros, this test picks a big multiple of both 5 and
# 8 larger than 256: 1280. A Huffman string of 1280 5-bit characters will
# require 800 octets, so we put 1600 zeroes in the hexdump.
#
# In order to keep it contained, we use a literal header field with an
# indexed name:
#
# - 01     -> literal field with name index 1 (:authority)
# - ffa105 -> Huffman string of length 800
#
# This results in somewhat unbalanced capabilities between encoders and
# decoders, where only one can deal with it.

mk_chars 0 "01 ffa105 %1600s"           | mk_hex
mk_chars 0 ":authority: %1280s\n"       | mk_msg
mk_chars 0 "literal idx 1 huf %1280s\n" | mk_enc

# Only cashpack will fail, because of its decoding buffer
tst_solely hdecode tst_decode --buffer-size 256 --expect-error BIG
tst_solely fdecode tst_decode --buffer-size 256 --expect-error BIG
tst_ignore "hdecode fdecode" tst_decode
tst_encode

_ ----------------------------------------------------
_ Decode a long Huffman string with invalid characters
_ ----------------------------------------------------

# To make matters simpler, we can use the horizontal tabulation that takes 24
# bits or 3 octets once coded. It's easy enough to embed and is illegal in a
# header field name.
#
# - 00     -> literal field without indexing
# - ffa405 -> Huffman string of length 803
# - ffffea -> Huffman coding for a tabulation

mk_chars 0 "00 ffa405 ffffea %1600s" | mk_hex
mk_msg </dev/null

tst_decode --expect-error CHR
