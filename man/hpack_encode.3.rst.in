.. License: BSD-2-Clause
.. (c) 2016-2020 Dridi Boukelmoune <dridi.boukelmoune@gmail.com>

===============================
hpack_encode, hpack_clean_field
===============================

---------------------
encode an HPACK block
---------------------

:Title upper: HPACK_ENCODE
:Manual section: 3

SYNOPSIS
========

| **#include <sys/types.h>**
| **#include <stdint.h>**
| **#include <hpack.h>**
|
| **enum hpack_flag_e;**
|
| **struct hpack_field {**
|     **uint32_t**   *flg*\ **;**
|     **uint16_t**   *idx*\ **;**
|     **uint16_t**   *nam_idx*\ **;**
|     **const char** *\*nam*\ **;**
|     **const char** *\*val*\ **;**
| **};**
|
| **struct hpack_encoding {**
|    **struct hpack_field** *\*fld*\ **;**
|    **size_t**             *fld_cnt*\ **;**
|    **void**               *\*buf*\ **;**
|    **size_t**             *buf_len*\ **;**
|    **hpack_event_f**      *\*cb*\ **;**
|    **void**               *\*priv*\ **;**
|    **unsigned**           *cut*\ **;**
| **};**
|
| **enum hpack_result_e hpack_encode(struct hpack** *\*hpack*\ **,**
| **\     const struct hpack_encoding** *\*enc*\ **);**
|
| **enum hpack_result_e hpack_clean_field(struct hpack_field** \
    *\*field*\ **);**

DESCRIPTION
===========

This is an overview of encoding with cashpack, a stateless event-driven HPACK
codec written in C. HPACK is a stateful protocol, but cashpack implements
encoding using a stateless event driver. The *hpack* parameter keeps track of
the dynamic table updates across multiple calls of the ``hpack_encode()``
function for the lifetime of the HTTP session. The *enc* parameter contains
the encoding context for the block or partial block being encoded.

The *fld* field is a pointer to an array of *fld_cnt* HPACK fields. All fields
are always encoded before requiring new input, allowing the caller to reuse
its array. Encoding is performed in a working memory buffer *buf* of *buf_len*
octets, the working buffer can safely be reused in subsequent calls. All the
events are described in the ``cashpack``\ (3) manual. The *priv* pointer is
passed to the *cb* callback for all the events.

If *cut* is zero, the HPACK block being encoded is expected to end with the
*fld_cnt* fields.

ENCODING FLAGS
==============

A header list is a set of key/values referenced by the fields *nam* and *val*
in ``struct hpack_field``. Those values may be omitted depending on the flags
set in the *flg* field. Indexed fields rely on the *idx* field instead, and
literal fields with an indexed name rely on *nam_idx*.

The encoding process of a header list is thus driven by flags that explain how
to interpret a ``struct hpack_field`` instance. Some flags can be combined and
others are mutual exclusive. Combining flags that aren't documented as working
together results in undefined behavior:

.. include:: @builddir@/hpf2rst.rst

ENCODING STATE MACHINE
======================

The encoding process produces events matching the following state machine. The
detailed state machine describes the possible encoding events of a complete
HPACK block. If the block is encoded in more than one pass, the event driver
resumes where it left, strictly adhering to the possible transitions. It can
however only resume at a FIELD event.

The state machine is laid out so that moving down means making progress in the
encoding process, and moving right implies a hierarchical relationship between
events. For instance a DATA event belongs after a FIELD event::

    (start)
       |
       +----> EVICT
       |        |
       |        v
       +----> TABLE ---.
       |        |      |
       |        v      |
       +----> EVICT    |
       |        |      |
       |        v      |
       +----> TABLE <--'
       |        |
       |        |
       |        v
       '----> FIELD ---> EVICT
               ^ |         |
               | '---->----+
               |           | .--.
               |           v v  |
    (end) <----+----<---- DATA -'
               ^           |
               |           v
               +----<--- INDEX

If you are familiar with regular expressions, here is a translation of the
encoding state machine to a regular expressions using the initials of the
events names::

    ^(E?T(E?T)?)?(FE?D+I?)+$

The state machine may look complex, but this is mainly due to dynamic table
events that *might* be emitted on many occasions. Here is the same state
machine, but ``FOO?`` ``BAR*`` and ``BAZ+`` events regex-like notations mean
that event ``FOO`` can happen zero to one time, ``BAR`` can happen zero to
many times and ``BAZ`` events can happen one to many times::

    (start)
       |
       +----> EVICT?
       |        |
       |        v
       |      TABLE
       |        |
       |        v
       |      EVICT?
       |        |
       |        v
       |      TABLE?
       |        |
       |        v
       '----> FIELD ---> EVICT?
                ^          |
                |          v
                |        DATA+
                |          |
                |          v
    (end) <-----+---<--- INDEX?

But the role of the dynamic table events is not directly related to the HTTP
message that is being encoded. If you focus on the events that help you build
an HPACK block, it becomes a lot simpler::

    (start)
       |
       '----> FIELD ---> DATA+
                ^         |
                |         |
    (end) <-----+----<----'

The FIELD event is merely here to allow changes before a header gets encoded.
You can for instance use table events to detect that fields with indexed flags
no longer reference valid indices, and turn them into field literals that may
or may not be inserted in the table. It is the mechanism that empowers caching
policies.

CLEANUP
=======

Once encoding is done, fields can be cleaned using the ``hpack_clean_field()``
function. It is equivalent to zeroing the *fld* parameter, except that checks
are performed and only fields relevant to the flags are cleaned. It is a means
for double-checking proper usage of the library. The *nam* and *val* pointers
may be set to ``NULL``, but if they point to memory that needs to be freed, it
MUST be done prior to calling ``hpack_clean_field()``.

AUTOMATIC INDEX LOOKUPS
=======================

To use the dynamic table without having to know all the details of the HPACK
protocol, you simply need to "OR" the flag ``HPACK_FLG_AUT_IDX`` on all fields
that may be indexed. Some well-known headers may be directly as indexed fields
or indexed names from the static table to save unneeded lookups when building
a request or a response. This is the case for all pseudo-headers, that in some
cases even the preferred way. For example ``:scheme`` allows two values *http*
and *https* that are both present in the static table.

For a fine-grained control of the indexing process, it is possible to follow
changes in the dynamic table via the events and adjust fields on ``FIELD``
events before they are processed. This implies a good understanding of HPACK
but enables more efficient lookups. Currently a binary search is done in the
static table and then a linear search in the dynamic one.

RETURN VALUE
============

The ``hpack_encode()`` function returns ``HPACK_RES_OK`` if *cut* is zero,
otherwise ``HPACK_RES_BLK``. On error, this function returns one of the listed
errors and makes the *hpack* argument improper for further use.

The ``hpack_clean_field()`` function returns ``HPACK_RES_OK`` if the field's
structure was properly zeroed, otherwise ``HPACK_RES_ARG``.

ERRORS
======

The ``hpack_encode()`` function can fail with the following errors:

``HPACK_RES_ARG``: *hpack* doesn't point to a valid encoder or *enc* contains
``NULL`` pointers or zero lengths, except *priv* which is optional. When an
automatic index lookup is performed, this error may also occur for the same
reasons as ``hpack_search()``.

All other errors except ``HPACK_RES_BSY``, see ``hpack_strerror``\ (3) for the
details of all possible errors.

EXAMPLE
=======

The following example shows an index-all strategy for encoding, attempting to
put every single field in the dynamic table regardless of whether this would
actually improve encoding efficiency.

Header lists are read from the standard input, separated by blank lines. The
encoded header blocks are written on the standard output, without anything to
indicate the boundaries between blocks. Information about the encoding process
is logged to the standard error.

.. include:: @builddir@/cashdumb.src
    :literal:

In this example the header lists will be read from a file:

.. include:: @builddir@/cashdumb.txt
    :literal:

Assuming a standard installation of cashpack, the program can be compiled and
will produce the following logs, the binary output being ignored:

.. include:: @builddir@/cashdumb.out
    :literal:

SEE ALSO
========

**cashpack**\(3),
**hpack_decode**\(3),
**hpack_decode_fields**\(3),
**hpack_decoder**\(3),
**hpack_dump**\(3),
**hpack_dynamic**\(3),
**hpack_encoder**\(3),
**hpack_entry**\(3),
**hpack_event_id**\(3),
**hpack_free**\(3),
**hpack_limit**\(3),
**hpack_monitor**\(3),
**hpack_resize**\(3),
**hpack_search**\(3),
**hpack_skip**\(3),
**hpack_static**\(3),
**hpack_strerror**\(3),
**hpack_tables**\(3),
**hpack_trim**\(3)
