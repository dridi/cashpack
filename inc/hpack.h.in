/*-
 * Copyright (c) 2016-2020 Dridi Boukelmoune
 * All rights reserved.
 *
 * Author: Dridi Boukelmoune <dridi.boukelmoune@gmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * HPACK: Header Compression for HTTP/2 (RFC 7541)
 */

#ifdef _SYNTASTIC
#  include <stdint.h>
#  include <stdlib.h>
#  include <unistd.h>
#endif

/* hpack_config */

enum hpack_config_e {
#define HPC(f, v, l) \
	HPACK_CFG_##f	= v,
#include "tbl/hpack_tbl.h"
#undef HPC
};

/* hpack_result */

enum hpack_result_e {
#define HPR(r, v, d, l)	HPACK_RES_##r	= v,
#include "tbl/hpack_tbl.h"
#undef HPR
};

/* hpack_alloc */

struct hpack;

typedef void * hpack_malloc_f(size_t, void *);
typedef void * hpack_realloc_f(void *, size_t, void *);
typedef void   hpack_free_f(void *, void *);

struct hpack_alloc {
	hpack_malloc_f	*malloc;
	hpack_realloc_f	*realloc;
	hpack_free_f	*free;
	void		*priv;
};

extern const struct hpack_alloc *hpack_default_alloc;

struct hpack * hpack_decoder(size_t, ssize_t, const struct hpack_alloc *, uint32_t);
struct hpack * hpack_encoder(size_t, ssize_t, const struct hpack_alloc *, uint32_t);
void hpack_free(struct hpack **);

enum hpack_result_e hpack_resize(struct hpack **, size_t);
enum hpack_result_e hpack_limit(struct hpack **, size_t);
enum hpack_result_e hpack_trim(struct hpack **);

/* hpack_error */

extern const char *hpack_unknown_name;
extern const char *hpack_unknown_value;

typedef void hpack_dump_f(void *, const char *, ...);

const char * hpack_strerror(enum hpack_result_e);
void hpack_dump(const struct hpack *, hpack_dump_f *, void *);

/* hpack_event */

enum hpack_event_e {
#define HPE(e, v, d, l)	HPACK_EVT_##e	= v,
#include "tbl/hpack_tbl.h"
#undef HPE
};

typedef void hpack_event_f(enum hpack_event_e, const char *, size_t,
    void *);

const char * hpack_event_id(enum hpack_event_e);

/* hpack_decode */

struct hpack_decoding {
	const void		*blk;
	size_t			blk_len;
	void			*buf;
	size_t			buf_len;
	hpack_event_f		*cb;
	void			*priv;
	unsigned		cut;
};

enum hpack_result_e hpack_decode(struct hpack *,
    const struct hpack_decoding *);

enum hpack_result_e hpack_decode_fields(struct hpack *,
    const struct hpack_decoding *, const char **, const char **);

enum hpack_result_e hpack_skip(struct hpack *);

/* hpack_encode */

enum hpack_flag_e {
#define HPF(f, v, l) \
	HPACK_FLG_##f	= v,
#include "tbl/hpack_tbl.h"
#undef HPF
};

struct hpack_field {
	uint32_t	flg;
	uint16_t	idx;
	uint16_t	nam_idx;
	const char	*nam;
	const char	*val;
};

struct hpack_encoding {
	struct hpack_field	*fld;
	size_t			fld_cnt;
	void			*buf;
	size_t			buf_len;
	hpack_event_f		*cb;
	void			*priv;
	unsigned		cut;
};

enum hpack_result_e hpack_encode(struct hpack *,
    const struct hpack_encoding *);

enum hpack_result_e hpack_clean_field(struct hpack_field *);

/* hpack_index */

/* REMOVE_ME
#define HPACK_STATIC 61
#define HPACK_OVERHEAD 32
   REMOVE_ME */

enum hpack_result_e hpack_static(hpack_event_f, void *);
enum hpack_result_e hpack_dynamic(struct hpack *, hpack_event_f, void *);
enum hpack_result_e hpack_tables(struct hpack *, hpack_event_f, void *);
enum hpack_result_e hpack_search(struct hpack *, uint16_t *, const char *,
    const char *);
enum hpack_result_e hpack_entry(struct hpack *, size_t, const char **,
    const char **);
